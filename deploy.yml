name: Build and deploy Jekyll site to gh-pages

# main 브랜치에 push(또는 PR 머지 등)를 트리거로 사용
on:
  push:
    branches:
      - main

# 권한: Pages에 쓰기 권한이 필요
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) 저장소 체크아웃 (전체 이력 필요하면 fetch-depth: 0)
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Ruby 환경 설정
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'    # 필요하면 바꿔라 (예: '2.7' 등)

      # 3) bundler gems 캐시 (선택적 — 빌드 속도 향상)
      - name: Cache Ruby gems
        uses: actions/cache@v4
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      # 4) 의존성 설치
      - name: Install dependencies
        run: |
          gem install bundler
          bundle config set --local path 'vendor/bundle'
          bundle install --jobs 4 --retry 3

      # 5) Jekyll 빌드
      - name: Build the site with Jekyll
        env:
          JEKYLL_ENV: production
        run: bundle exec jekyll build --destination _site

      # 6) (옵션) CNAME 파일 자동 추가 — 커스텀 도메인이 있으면 사용
      # run: echo 'www.example.com' > _site/CNAME

      # 7) 배포: _site 폴더를 gh-pages 브랜치에 올리기
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./_site